template <typename T, typename = typename enable_if<is_integral<T>::value>::type>
class Segment_Tree
{
private:
    vector<T> seg_tree;
    int arr_size;

    void buildUtil(int low, int high, int seg_index, vector<T> const &arr)
    {
        if (low == high)
        {
            seg_tree[seg_index] = arr[low];
            return;
        }

        int mid = low + (high - low) / 2;
        buildUtil(low, mid, 2 * seg_index + 1, arr);
        buildUtil(mid + 1, high, 2 * seg_index + 2, arr);
        seg_tree[seg_index] = min(seg_tree[2 * seg_index + 1], seg_tree[2 * seg_index + 2]);
    }

    void assign(int low, int high, int seg_index, int index, T value)
    {
        if (low == high)
        {
            seg_tree[seg_index] = value;
            return;
        }

        int mid = low + (high - low) / 2;
        if (index >= low && index <= mid)
            assign(low, mid, 2 * seg_index + 1, index, value);
        else
            assign(mid + 1, high, 2 * seg_index + 2, index, value);

        seg_tree[seg_index] = min(seg_tree[2 * seg_index + 1], seg_tree[2 * seg_index + 2]);
    }

    void increment(int low, int high, int seg_index, int index, T value)
    {
        if (low == high)
        {
            seg_tree[seg_index] += value;
            return;
        }

        int mid = low + (high - low) / 2;
        if (index >= low && index <= mid)
            increment(low, mid, 2 * seg_index + 1, index, value);
        else
            increment(mid + 1, high, 2 * seg_index + 2, index, value);

        seg_tree[seg_index] = min(seg_tree[2 * seg_index + 1], seg_tree[2 * seg_index + 2]);
    }

    T queryUtil(int low, int high, int seg_index, int start, int end)
    {
        if (start <= low && end >= high)
            return seg_tree[seg_index];

        if (start > high || end < low)
            return numeric_limits<T>::max();

        int mid = low + (high - low) / 2;
        T left = queryUtil(low, mid, 2 * seg_index + 1, start, end);
        T right = queryUtil(mid + 1, high, 2 * seg_index + 2, start, end);
        return min(left, right);
    }

public:
    Segment_Tree(vector<T> const &arr)
    {
        build(arr);
    }

    void build(vector<T> const &arr)
    {
        arr_size = arr.size();
        seg_tree.resize(4 * arr_size + 1);
        buildUtil(0, arr_size - 1, 0, arr);
    }

    void assign(int index, T value)
    {
        assign(0, arr_size - 1, 0, index, value);
    }

    void increment(int index, T value)
    {
        increment(0, arr_size - 1, 0, index, value);
    }

    T query(int start, int end)
    {
        return queryUtil(0, arr_size - 1, 0, start, end);
    }
};